morphlines : {
    id: MOCK_Feed_Name 
    importCommands : {"org.kitesdk.**"}
    commands:
    [
        {
            readLine {charset : UTF-8}
        # readJSON {charset : UTF-8} 
        # convert incoming data format here 
        }
        {
            tryRules
            {
                catchExceptions : true 
                throwExceptionIfAllRulesFailed : false 
                rules : 
                [
                    {
                        #Step One : Read the data from the input file. Parse accordingly 
                        commands : 
                        [
                            {
                                toByteArray {field : message} 
                            }
                            {
                                setvalues{ _attachment_body : "@{message}"}
                            }
                            {
                                readJson {}
                            }
                            {
                                extractJsonPaths
                                {
                                    flatten : false 
                                    paths : 
                                    {
                                        mockKeyName : "/mockKeyName"
                                        mockKeyNameII : "/mockKeyNameII"
                                        mockKeyNameIII : "/mockKeyNameIII"
                                        mockKeyNameIV : "/mockKeyNameIV"
                                    }
                                }
                            }

                            # Print out the JSON value for key: mockKeyNameII
                            {
                                logInfo { format : "Mock Data Feed Data : {} \n\n", args : ["@mockKeyNameII"]}

                            }

                            # GROK the input if you have a special type of input 
                            {
                                tryRules{
                                    catchExceptions : true 
                                    throwExceptionIfAllRulesFailed : false 
                                    rules : #You can insert multiple grok statements here
                                    [
                                        commands : [
                                            {
                                                grok { 
                                                dictionaryFiles : grok-patterns #grok-patterns is a config file that contains multiple grok variables used for grokking 
                                                expressions : 
                                                {
                                                    mockKeyNameII : """<%{INT}>%{INT} INSERT GROK STATEMENT HERE.... , %{GREEDYDATA: key_value_pairs_string}"""
                                                }
                                                }
                                            }
                                            
                                            {
                                                grok {
                                                dictionaryFiles : grok-patterns
                                                expressions : 
                                                {
                                                    mockKeyNameIII : """ INSERT GROK STATEMENT III """ 
                                                }
                                                }
                                            }
                                        ]
                                    ]       
                                }
                            }

                            #{
                                #logInfo { format : "\n\n Before SplitKeyValue key_value_array : {}\n\n", args : ["@key_value_pairs_string"]}
                            #}

                            {
                                split{
                                    inputField : key_value_pairs_string
                                    outputField : key_value_array
                                    separator : "|" 
                                    trim: true 
                                }
                            }

                            #{
                                #logInfo { format : "\n\n Before SplitKeyValue key_value_array : {}\n\n", args : ["@key_value_pairs_string"]}
                            #}

                            {
                                splitKeyValue
                                {
                                    inputField : key_value_array
                                    outputFieldPrefix : "" 
                                    isRegex : false 
                                    separator : "="
                                    addEmptyStrings : false 
                                    trim : true 
                                }
                            }

                            #{
                                #logInfo { format : "\n\n After SplitKeyValue key_value_array : {}\n\n", args : ["@{}"]}
                            #}

                            {
                                setvalues
                                {
                                    event_date : "@{\event_time}"
                                    event_time : "@{event_date}"
                                }
                            }
                            {
                                addCurrentTIme
                                {
                                    field: current_time 
                                }
                            }

                            {
                                java 
                                {
                                    code : """
                                    Map<String, Object> settings = context.getSettings(); 
                                    for(String setting : settings.keySet())
                                    {
                                        record.put(setting, settings.get(setting))
                                    }
                                    return child.process(record); 
                                    """
                                }
                            }

                            {
                                convertTimestamp 
                                {
                                    field : event_date 
                                    inputFormats : ["unixTimeInMillis"] 
                                    outputFormat : "yyyy-MM-dd"
                                }
                            }

                            {
                                toAvro
                                {
                                    schemaFile : {{morphlines_dir}}/feedNameDirectory/mockfeed_avro.avsc 
                                }
                            }

                            {
                                java 
                                {
                                    code : """
                                    String date = record.getFirstValue("event_date").toString(); 
                                    String body = record.getFirstValue("_attachment_body").toString(); 
                                    record.put("dt=" + date, body); 
                                    return child.process(record); 
                                    """
                                }
                            }

                        ]
                    }

                    {
                        commands : 
                        [
                            {
                                setvalues
                                {
                                    error: "@{message}"
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    }
}
