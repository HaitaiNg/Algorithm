1D range search
Line segment intersection : Given N horizontal
and vertical line segments, find all intersections 

Sweep-Line Algorithm
Sweep vertical line from left to right 

2D Orthgonal Range Search 
2D Grid implementation 
Space-Time trade off :
Space M^2 + N 
Time 1 + N / M^2 per square examined, on Average

Space partitioning trees 
2D Trees ** (advanced data structure)
KDTree : recursively partiion k-dimensional space into 2 halfspaces

1D interval Search 
Create a BST where each node stores an interval
-use left endpoint as BST key 
-store max endpoint in subtree rooted as node

To search for any one interval that intersects query interval (lo, hi):
-If interval in node intersects query interval, return it
-else if left subtree is null, go right
-else if max endopint in left subtree is less than lo, go right 
-else go left 

Node x = root;
while(x != null)
{
    if(x.interval.intersects(lo,hi)) return x.interval;
    else if(x.left == null) x = x.right; 
    else if (x.left.max < lo) x = x.right; 
    else x = x.left; 
}
return null; 

Interval Search Tree: Analysis: Use a red-black tree BST 
Sweep Line Algorithm **