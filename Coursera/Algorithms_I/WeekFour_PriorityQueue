Stack: Remove the item most recently added 
Queue: Remove the item least recently added 
Randomized Queu: Remove a random item 
Priority Queue: Remove the largest or smallest item 

Applications of Priority Queue
-Event-driven simulation
-Numerical Computation 
-Data Compression (Huffman codes)
-Graph Searching (Dijkra's / Prim's algorithm)
-Number Theory
-Artificial Intelligence
-Statistics 
-Operating Systems  (load balancing, interrupt handling)
-Discrete Optimiziation (bin packing, scheduling)
-Spam Filtering 

Binary Heap: Array representation of a heap-ordred complete binary tree. 
You can use array indices to move through tree:
    -parent of node at k is k/2 
    -children of node at k are 2k & 2k+1 

What happens when child's key becomes larger key than its parent's key?
Exchange key in child with key in parent 
Repeat until heap order retstored 

Insertion in a heap
-Add node at end, then swim it up 
-At move 1 + lg(n) compares 

Parent's key becomes smaller than one (or both) of its children
-Exchange key in parent with key in larger childf 
-Repeat until heap order restored 

Delete the maximum in a heap 
=Exchange root with node at end, then sink it down 
-Cost : at most 2lgN compares 

Immutable data types in Java: 
    -String, Integer, Double. Color, Vector, Transaction, Point2D
Mutable data types in Java: 
    -StringBuilder, Stack, Counter, Java array 

Pros of Immutability
-simplifies debugging
-safer in concurrent programming
-safe to use in priority queues or symbol table 


Heap Sort
-Create max-heap with all N keys 
-Repeatedly remove the maximum key 

Heap construction uses <= 2N compares and exchanges 
HeapSort uses <= 2Nlg(N) compares and exchanges 

In-place sorting algorithm with NLogN worst-case 
Merge sort: no, linear extra space 
Quick sort: no, quadratic time in worst case 
Heap sort: yes 

Heap sort is optimal for both time and space but, 
    -inner loop takes longer than quick sorts 
    -makes poor use of cache memory 
    -not very stable 

    