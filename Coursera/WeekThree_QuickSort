Quick Sort 
- Shuffle the array 
- Partition so that for some j,
    -entry a[j] is in place 
    -no larger entry to the left of j 
    -no smaller entry to the right of j 
- Sort each piece recursively 

Repeat until i and j pointers cross 
Scan i from left to right as long as a[i] < a[lo] 
Scan j from right to left so long as a[j] > a[lo] 
Exchange a[i] with a[j] 

When pointers cross 
Exchange a[lo] with a[j] 


Quick sort does all partitioning in place:
Worst case: O(n^2) (very very low probability) 
Average case: O(nlogn) 
Quick sort is not stable 
Best choice of pivot item = median 

When there are duplicate keys, use merge sort!
The run time for merge sort is NlgN even with duplicates
If you try and run quick sort on duplicate keys,
the run time can be quadratic! 

Java System Sorts 
Array.sort()
    -Has different method for each primitive type
    -Has a method for data types that implement Comparable
    -Has a method that uses Comparator 
    -Uses tuned quicksort for primitive types, tuned mergesort for objects 

Which Algorithm To Use?
Applications have diverse attributes 
    -Stable?
    -Parallel?
    -Deterministic?
    -Keys all distinct?
    -Multiple key types?
    -Linked list or arrays?
    -Large or small items?
    -Is your array randomly ordered?
    -Need guaranteed performance? 

